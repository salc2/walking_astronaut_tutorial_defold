
local factor_touch_hor = 25
local factor_touch_ver = 45

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function map(x, a1, a2, b1, b2)
	return (x - a1) / (a2 - a1) * (b2 - b1) + b1
end

function clamp(val, lower, upper)
	if lower > upper then lower, upper = upper, lower end
	return math.max(lower, math.min(upper, val))
end

local init_vec3, current_vec3
function to_discrete(x,ref, no, yes)
end

function click(node_name)
	local n = gui.get_node(node_name)
	gui.animate(n, "color", vmath.vector4(1,0,0,1), gui.EASING_LINEAR, 0.2)
	msg.post("astronaut", "to_input", {action_id = node_name})
end
function pain_blue(node_name)
	local n = gui.get_node(node_name)
	gui.animate(n, "color", vmath.vector4(0,0,1,1), gui.EASING_LINEAR, 0.2)
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed

	if current_vec3 ~= nil and init_vec3 ~= nil then
		local bottom = gui.get_position(gui.get_node("front")).y
		local top = gui.get_position(gui.get_node("back")).y
		local left = gui.get_position(gui.get_node("left")).x
		local right = gui.get_position(gui.get_node("right")).x

		
		local new_y = map(current_vec3.y, init_vec3.y - factor_touch_ver, init_vec3.y + factor_touch_ver  , bottom, top)
		local new_x = map(current_vec3.x, init_vec3.x - factor_touch_hor, init_vec3.x + factor_touch_hor  , left, right)
		local ball = gui.get_node("ball")
		--	local ball_pos = gui.get_position(ball)

		local del_top = 25
		if new_y - del_top <= bottom then
			new_y = bottom
			click("front")
			pain_blue("back")
		elseif new_y >= top - del_top then
			new_y = top
			click("back")
			pain_blue("front")
		else
			pain_blue("back")
			pain_blue("front")
			new_y =  0
		end
		local del_do = 5
		if new_x - del_do <= left then
			new_x = left
			click("left")
		elseif new_x >= right - del_do then
			new_x = right
			click("right")
		else
			pain_blue("left")
			pain_blue("right")
			new_x =  0
		end
		
		local to = vmath.vector3(new_x, new_y, 0)
		gui.animate(ball, "position.y", to.y, gui.EASING_LINEAR, 0.03)
		gui.animate(ball, "position.x", to.x, gui.EASING_LINEAR, 0.03)

		
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		for i, touchdata in ipairs(action.touch) do
			if i == 1 then 
				local pos = vmath.vector3(touchdata.x, touchdata.y, 0)
				if action.pressed then
					init_vec3 = vmath.vector3(action.screen_x,action.screen_y, 0)
					local dir = gui.get_node("direction")
					gui.animate(dir, "color.w", 0.5, gui.EASING_LINEAR, 0.2)
					
				end
				if action.repeated then
					local x = clamp(action.screen_x, init_vec3.x - factor_touch_ver,  init_vec3.x + factor_touch_ver)
					local y = clamp(action.screen_y, init_vec3.y - factor_touch_hor,  init_vec3.y + factor_touch_hor)
					current_vec3 = vmath.vector3( x , y, 0)
				--	pprint(current_vec3)
				end
				if action.released then
					current_vec3 = init_vec3
					gui.reset_nodes()
					--local dir = gui.get_node("direction")
					--gui.animate(dir, "color.w", 0, gui.EASING_LINEAR, 0.2)
				end
			end

		end
	end
	-- msg.post("astronaut#astronaut", "hola amigo")
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
